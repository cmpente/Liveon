package com.altlifegames.altlife.di

import android.content.Context
import com.altlifegames.domain.model.*
import com.altlifegames.domain.repository.*
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.components.SingletonComponent
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOf
import javax.inject.Singleton

@Module
@InstallIn(SingletonComponent::class)
object RepositoryModule {
    
    @Provides
    @Singleton
    fun provideSaveRepository(@ApplicationContext context: Context): SaveRepository = object : SaveRepository {
        override suspend fun saveGame(character: Character, slotId: Long) {
            TODO("Not yet implemented")
        }
        
        override suspend fun loadGame(slotId: Long): Character? {
            return null
        }
        
        override suspend fun getSaveSlots(): List<SaveSlot> {
            return emptyList()
        }
        
        override suspend fun deleteSaveSlot(slotId: Long) {
            TODO("Not yet implemented")
        }
    }
    
    @Provides
    @Singleton
    fun provideSettingsRepository(@ApplicationContext context: Context): SettingsRepository = object : SettingsRepository {
        override suspend fun isMatureContentEnabled(): Boolean {
            return false
        }
        
        override suspend fun setMatureContentEnabled(enabled: Boolean) {
            TODO("Not yet implemented")
        }
        
        override suspend fun isSoundEnabled(): Boolean {
            return true
        }
        
        override suspend fun setSoundEnabled(enabled: Boolean) {
            TODO("Not yet implemented")
        }
        
        override suspend fun isMusicEnabled(): Boolean {
            return true
        }
        
        override suspend fun setMusicEnabled(enabled: Boolean) {
            TODO("Not yet implemented")
        }
    }
}
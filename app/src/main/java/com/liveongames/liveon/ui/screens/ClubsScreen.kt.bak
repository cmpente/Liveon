package com.liveongames.liveon.ui.screens

import androidx.compose.runtime.Composable
import com.liveongames.liveon.util.getClubCategoryTitle
import androidx.compose.foundation.*
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.vectorResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.liveongames.liveon.data.ClubsRepository
import com.liveongames.liveon.model.*
import com.liveongames.liveon.ui.theme.*

@Composable
fun ClubsScreen(
    navController: NavController,
    playerGPA: Double = 2.5,
    playerSkills: Map<String, Int> = mapOf(
        "Athletics" to 5,
        "Intelligence" to 6,
        "Creativity" to 4,
        "Social" to 7
    )
) {
    val availableClubs = remember(playerGPA, playerSkills) {
        ClubsRepository.getClubsByPlayerStats(playerGPA, playerSkills)
    }

    var selectedCategory by remember { mutableStateOf(ClubCategory.SPORTS) }
    var searchText by remember { mutableStateOf("") }

    val filteredClubs = availableClubs.filter { club ->
        val matchesCategory = club.category == selectedCategory
        val matchesSearch = searchText.isBlank() || 
            club.name.contains(searchText, ignoreCase = true) || 
            club.description.contains(searchText, ignoreCase = true)
        
        matchesCategory && matchesSearch
    }

    Scaffold(
        containerColor = Charcoal,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = "Clubs & Activities",
                        style = MaterialTheme.typography.headlineSmall,
                        color = Color.White
                    )
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = DarkNavy
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(16.dp)
        ) {
            // Search bar
            OutlinedTextField(
                value = searchText,
                onValueChange = { searchText = it },
                label = { Text("Search clubs...", color = Silver) },
                modifier = Modifier.fillMaxWidth(),
                colors = TextFieldDefaults.outlinedTextFieldColors(
                    focusedBorderColor = Gold,
                    unfocusedBorderColor = SteelBlue,
                    cursorColor = Gold
                ),
                leadingIcon = {
                    Icon(
                        imageVector = Icons.Default.Search,
                        contentDescription = "Search",
                        tint = Silver
                    )
                }
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Category tabs
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                ClubCategory.values().forEach { category ->
                    FilterChip(
                        selected = selectedCategory == category,
                        onClick = { selectedCategory = category },
                        label = { Text(getClubCategoryTitle(category)) },
                        modifier = Modifier.weight(1f),
                        colors = FilterChipDefaults.filterChipColors(
                            containerColor = Graphite,
                            selectedContainerColor = when(category) {
                                ClubCategory.SPORTS -> Burgundy
                                ClubCategory.ACADEMIC -> Gold
                                ClubCategory.CREATIVE -> Forest
                                ClubCategory.VOLUNTEER -> SteelBlue
                                ClubCategory.LEADERSHIP -> Crimson
                            }
                        )
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Club listings
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .shadow(4.dp, RoundedCornerShape(16.dp))
                    .clip(RoundedCornerShape(16.dp)),
                colors = CardDefaults.cardColors(
                    containerColor = Graphite
                )
            ) {
                LazyColumn(
                    modifier = Modifier
                        .fillMaxSize()
                        .padding(16.dp),
                    verticalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    if (filteredClubs.isEmpty()) {
                        item {
                            Box(
                                modifier = Modifier.fillMaxWidth(),
                                contentAlignment = Alignment.Center
                            ) {
                                Text(
                                    text = "No clubs available in this category",
                                    style = MaterialTheme.typography.bodyLarge,
                                    color = Silver
                                )
                            }
                        }
                    } else {
                        items(filteredClubs.size) { index ->
                            val club = filteredClubs[index]
                            ClubCard(
                                club = club,
                                playerGPA = playerGPA,
                                playerSkills = playerSkills
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun ClubCard(
    club: Club,
    playerGPA: Double,
    playerSkills: Map<String, Int>
) {
    val canJoin = canJoinClub(club, playerGPA, playerSkills)
    val cardColor = if (canJoin) Navy else Graphite.copy(alpha = 0.7f)
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .shadow(2.dp, RoundedCornerShape(12.dp))
            .clip(RoundedCornerShape(12.dp)),
        colors = CardDefaults.cardColors(
            containerColor = cardColor
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Box(
                    modifier = Modifier
                        .size(50.dp)
                        .background(
                            when(club.category) {
                                ClubCategory.SPORTS -> Burgundy
                                ClubCategory.ACADEMIC -> Gold
                                ClubCategory.CREATIVE -> Forest
                                ClubCategory.VOLUNTEER -> SteelBlue
                                ClubCategory.LEADERSHIP -> Crimson
                            },
                            RoundedCornerShape(8.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = ImageVector.vectorResource(id = club.iconRes),
                        contentDescription = null,
                        tint = Color.White
                    )
                }

                Spacer(modifier = Modifier.width(12.dp))

                Column(
                    modifier = Modifier.weight(1f)
                ) {
                    Text(
                        text = club.name,
                        style = MaterialTheme.typography.titleMedium,
                        color = Color.White,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = getClubCategoryTitle(club.category),
                        style = MaterialTheme.typography.bodyMedium,
                        color = Silver
                    )
                }

                when(club.tryoutDifficulty) {
                    TryoutDifficulty.EASY -> {
                        Badge(
                            containerColor = Forest,
                            contentColor = Color.White
                        ) {
                            Text(
                                text = "Easy",
                                style = MaterialTheme.typography.bodySmall,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                    TryoutDifficulty.MEDIUM -> {
                        Badge(
                            containerColor = Gold,
                            contentColor = DarkNavy
                        ) {
                            Text(
                                text = "Medium",
                                style = MaterialTheme.typography.bodySmall,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                    TryoutDifficulty.HARD -> {
                        Badge(
                            containerColor = Crimson,
                            contentColor = Color.White
                        ) {
                            Text(
                                text = "Hard",
                                style = MaterialTheme.typography.bodySmall,
                                fontWeight = FontWeight.Bold
                            )
                        }
                    }
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                text = club.description,
                style = MaterialTheme.typography.bodyMedium,
                color = Silver
            )

            Spacer(modifier = Modifier.height(12.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                if (club.gpaRequirement > 0) {
                    InfoItem(
                        icon = Icons.Default.School,
                        text = "GPA: ${club.gpaRequirement}",
                        color = if (playerGPA >= club.gpaRequirement) Forest else Crimson
                    )
                }

                if (club.skillRequirement != null) {
                    val playerSkill = playerSkills[club.skillRequirement] ?: 0
                    InfoItem(
                        icon = when(club.skillRequirement) {
                            "Athletics" -> Icons.Default.DirectionsRun
                            "Intelligence" -> Icons.Default.Lightbulb
                            "Creativity" -> Icons.Default.Palette
                            "Social" -> Icons.Default.People
                            else -> Icons.Default.Star
                        },
                        text = "${club.skillRequirement}: ${club.skillLevel}",
                        color = if (playerSkill >= club.skillLevel) Forest else Crimson
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Button(
                onClick = { /* Try out for club */ },
                enabled = canJoin,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(48.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = if (canJoin) 
                        when(club.category) {
                            ClubCategory.SPORTS -> Burgundy
                            ClubCategory.ACADEMIC -> Gold
                            ClubCategory.CREATIVE -> Forest
                            ClubCategory.VOLUNTEER -> SteelBlue
                            ClubCategory.LEADERSHIP -> Crimson
                        } 
                    else Graphite,
                    contentColor = Color.White,
                    disabledContainerColor = Graphite.copy(alpha = 0.5f),
                    disabledContentColor = Silver
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    text = if (canJoin) "Try Out" else "Requirements Not Met",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }
        }
    }
}

fun canJoinClub(club: Club, playerGPA: Double, playerSkills: Map<String, Int>): Boolean {
    // Check GPA requirement
    if (club.gpaRequirement > 0 && playerGPA < club.gpaRequirement) {
        return false
    }
    
    // Check skill requirement
    if (club.skillRequirement != null) {
        val playerSkillLevel = playerSkills[club.skillRequirement] ?: 0
        return playerSkillLevel >= club.skillLevel
    }
    
    return true
}